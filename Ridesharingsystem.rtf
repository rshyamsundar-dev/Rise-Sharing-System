{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 "---------------------------\
Class creation (evaluate in Workspace)\
---------------------------"\
\
Object subclass: #Ride\
    instanceVariableNames: 'rideID pickupLocation dropoffLocation distance'\
    classVariableNames: ''\
    poolDictionaries: ''\
    category: 'RideSharing'.\
\
Object subclass: #StandardRide\
    instanceVariableNames: ''\
    classVariableNames: ''\
    poolDictionaries: ''\
    category: 'RideSharing'.\
StandardRide subclass: #PremiumRide\
    instanceVariableNames: ''\
    classVariableNames: ''\
    poolDictionaries: ''\
    category: 'RideSharing'.\
\
Object subclass: #Driver\
    instanceVariableNames: 'driverID name rating assignedRides'\
    classVariableNames: ''\
    poolDictionaries: ''\
    category: 'RideSharing'.\
\
Object subclass: #Rider\
    instanceVariableNames: 'riderID name requestedRides'\
    classVariableNames: ''\
    poolDictionaries: ''\
    category: 'RideSharing'.\
smalltalk\
Copy code\
"---------------------------\
Ride (base) methods\
---------------------------"\
\
Ride >> initialize\
    rideID := nil.\
    pickupLocation := ''.\
    dropoffLocation := ''.\
    distance := 0.0.\
    ^self\
\
Ride class >> newRideID: anID pickup: p dropoff: d distance: dist\
    | obj |\
    obj := self new.\
    obj initialize.\
    obj setRideID: anID.\
    obj setPickupLocation: p.\
    obj setDropoffLocation: d.\
    obj setDistance: dist.\
    ^obj\
\
"Encapsulation: provide accessors rather than exposing instance variables directly"\
Ride >> setRideID: anID\
    rideID := anID.\
\
Ride >> rideID\
    ^rideID\
\
Ride >> setPickupLocation: p\
    pickupLocation := p.\
\
Ride >> pickupLocation\
    ^pickupLocation\
\
Ride >> setDropoffLocation: d\
    dropoffLocation := d.\
\
Ride >> dropoffLocation\
    ^dropoffLocation\
\
Ride >> setDistance: dist\
    distance := dist asFloat.\
\
Ride >> distance\
    ^distance\
\
"Default fare calculation (can be overridden)"\
Ride >> fare\
    "Base rate 1.0 currency unit per distance"\
    ^distance * 1.0\
\
Ride >> rideDetails\
    ^String streamContents: [:s | \
        s nextPutAll: 'Ride ', rideID printString; cr;\
        nextPutAll: 'Pickup: ', pickupLocation; cr;\
        nextPutAll: 'Dropoff: ', dropoffLocation; cr;\
        nextPutAll: 'Distance: ', (distance printString), ' km'; cr;\
        nextPutAll: 'Fare: ', (self fare) printString ].\
\
"---------------------------\
StandardRide (overrides fare)\
---------------------------"\
StandardRide class >> newRideID: anID pickup: p dropoff: d distance: dist\
    ^(Ride newRideID: anID pickup: p dropoff: d distance: dist) as: self.\
\
StandardRide >> fare\
    "Standard rides: 1.0 per km"\
    ^self distance * 1.0\
\
"---------------------------\
PremiumRide (overrides fare)\
---------------------------"\
PremiumRide class >> newRideID: anID pickup: p dropoff: d distance: dist\
    ^(Ride newRideID: anID pickup: p dropoff: d distance: dist) as: self.\
\
PremiumRide >> fare\
    "Premium rides: higher base multiplier + premium fee"\
    | baseRate premiumSurcharge |\
    baseRate := 2.0. "2 currency units per km"\
    premiumSurcharge := 5.0. "flat premium booking fee"\
    ^(self distance * baseRate) + premiumSurcharge.\
\
"Note: the 'as:' message above uses polymorphic class change in some Smalltalks; if not available, create instances via the subclass constructors pattern instead."\
\
"---------------------------\
Driver class (encapsulation: assignedRides is private)\
---------------------------"\
\
Driver >> initialize\
    driverID := nil.\
    name := ''.\
    rating := 0.0.\
    assignedRides := OrderedCollection new. "kept private (no direct external access)"\
    ^self\
\
Driver class >> newWithID: anID name: aName rating: aRating\
    | d |\
    d := self new.\
    d initialize.\
    d setDriverID: anID.\
    d setName: aName.\
    d setRating: aRating.\
    ^d\
\
Driver >> setDriverID: anID\
    driverID := anID.\
\
Driver >> driverID\
    ^driverID\
\
Driver >> setName: aName\
    name := aName.\
\
Driver >> name\
    ^name\
\
Driver >> setRating: aRating\
    rating := aRating.\
\
Driver >> rating\
    ^rating\
\
"addRide encapsulates the mutation of assignedRides"\
Driver >> addRide: aRide\
    assignedRides add: aRide.\
\
Driver >> rides\
    "Return a copy to preserve encapsulation"\
    ^assignedRides copy\
\
Driver >> getDriverInfo\
    | s |\
    s := String streamContents: [:st |\
        st nextPutAll: 'Driver ID: ', driverID printString; cr;\
        st nextPutAll: 'Name: ', name; cr;\
        st nextPutAll: 'Rating: ', rating printString; cr;\
        st nextPutAll: 'Assigned rides: ', (assignedRides size) printString ].\
    ^s.\
\
"---------------------------\
Rider class (encapsulation for requestedRides)\
---------------------------"\
\
Rider >> initialize\
    riderID := nil.\
    name := ''.\
    requestedRides := OrderedCollection new.\
    ^self\
\
Rider class >> newWithID: anID name: aName\
    | r |\
    r := self new.\
    r initialize.\
    r setRiderID: anID.\
    r setName: aName.\
    ^r\
\
Rider >> setRiderID: anID\
    riderID := anID.\
\
Rider >> riderID\
    ^riderID\
\
Rider >> setName: aName\
    name := aName.\
\
Rider >> name\
    ^name\
\
Rider >> requestRide: aRide\
    requestedRides add: aRide.\
\
Rider >> viewRides\
    "Return a string with ride details"\
    | out |\
    out := String streamContents: [:s |\
        s nextPutAll: 'Rider: ', name; cr.\
        requestedRides do: [:r | s nextPutAll: (r rideDetails); cr; s nextPutAll: '---'; cr ]].\
    ^out.\
smalltalk\
Copy code\
"---------------------------\
Usage / Demo (evaluate to see polymorphism)\
---------------------------"\
\
| r1 r2 r3 rides driver rider |\
\
r1 := StandardRide newRideID: 'R100' pickup: 'Station' dropoff: 'Mall' distance: 4.5.\
r2 := PremiumRide newRideID: 'R101' pickup: 'Home' dropoff: 'Airport' distance: 12.0.\
r3 := StandardRide newRideID: 'R102' pickup: 'Office' dropoff: 'Gym' distance: 3.0.\
\
rides := OrderedCollection new.\
rides add: r1; add: r2; add: r3.\
\
"Polymorphism: calling fare and rideDetails on heterogeneous collection"\
rides do: [:ride |\
    Transcript show: ride rideDetails; cr.\
    Transcript show: 'Computed fare: ', (ride fare) printString; cr; cr].\
\
"Driver and Rider demo"\
driver := Driver newWithID: 'D01' name: 'Asha' rating: 4.8.\
driver addRide: r1.\
driver addRide: r2.\
\
rider := Rider newWithID: 'U01' name: 'Rahul'.\
rider requestRide: r2.\
rider requestRide: r3.\
\
Transcript show: driver getDriverInfo; cr.\
Transcript show: rider viewRides; cr.}